// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// Enums
enum AnimeStatus {
  ONGOING
  COMPLETED
  ANNOUNCED
}

// Models
model User {
  id        String   @id @default(cuid())
  name      String?
  username  String   @unique
  email     String   @unique
  avatar    String?
  image     String?
  emailVerified DateTime?
  bio       String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  reviews     Review[]
  userAnime   UserAnime[]
  followers   Follow[]   @relation("followers") // users who follow this user
  following   Follow[]   @relation("following") // users this user follows
  lists       List[]
  accounts    Account[]
  sessions    Session[]
}

model Anime {
  id         String       @id @default(cuid())
  // Consider adding multiple localized titles in JSON
  title      String
  synopsis   String?
  genres     Json?
  studio     String?
  year       Int?
  episodes   Int?
  status     AnimeStatus?
  coverArt   String?
  screenshots Json?
  trailers   Json?
  staff      Json? // director, writer, voice actors, etc.
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt

  episodesRel Episode[]
  reviews     Review[]
  userAnime   UserAnime[]
  listItems   ListItem[]

  @@index([title])
  @@index([year])
  @@index([status])
}

model Episode {
  id            String   @id @default(cuid())
  animeId       String
  season        Int?     // optional season number
  episodeNumber Int
  title         String?
  synopsis      String?
  airDate       DateTime?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  anime   Anime  @relation(fields: [animeId], references: [id], onDelete: Cascade)
  reviews Review[]

  @@unique([animeId, season, episodeNumber])
  @@index([animeId])
}

model Review {
  id        String   @id @default(cuid())
  userId    String
  animeId   String?
  episodeId String?
  rating    Int      // 1-10 rating scale
  content   String?
  spoiler   Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  anime  Anime? @relation(fields: [animeId], references: [id], onDelete: Cascade)
  episode Episode? @relation(fields: [episodeId], references: [id], onDelete: Cascade)

  // Helpful for sorting and lookups
  @@index([userId])
  @@index([animeId])
  @@index([episodeId])
}

model UserAnime {
  id             String   @id @default(cuid())
  userId         String
  animeId        String
  status         String   // Watching, Completed, Plan to Watch, Dropped, On Hold
  currentEpisode Int      @default(0)
  rating         Int?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  anime Anime @relation(fields: [animeId], references: [id], onDelete: Cascade)

  @@unique([userId, animeId])
  @@index([userId])
  @@index([animeId])
}

model Follow {
  followerId String
  followingId String
  createdAt DateTime @default(now())

  follower User @relation("following", fields: [followerId], references: [id], onDelete: Cascade)
  following User @relation("followers", fields: [followingId], references: [id], onDelete: Cascade)

  @@id([followerId, followingId])
  @@index([followingId])
}

model List {
  id          String   @id @default(cuid())
  userId      String
  name        String
  description String?
  isPublic    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  items     ListItem[]

  @@index([userId])
}

model ListItem {
  id        String   @id @default(cuid())
  listId    String
  animeId   String
  order     Int
  createdAt DateTime @default(now())

  list  List  @relation(fields: [listId], references: [id], onDelete: Cascade)
  anime Anime @relation(fields: [animeId], references: [id], onDelete: Cascade)

  @@unique([listId, animeId])
  @@index([listId])
  @@index([animeId])
}

// NextAuth models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  oauth_token_secret String?
  oauth_token       String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@id([identifier, token])
}
